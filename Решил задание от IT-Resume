# Задание 1

``sql

— Расчёт коэффициента удержания с разбивкой по когортам

С базой В ВИДЕ (
 ВЫБЕРИТЕ
 to_char(u.date_joined, 'ГГГГ-ММ') AS yw,
 count(DISTINCT u.id) AS размер_когорты
 ОТ пользователей u 
 ГРУППА ПО yw
),
user_activity КАК (
 ВЫБЕРИТЕ
        u.id,
 to_char(u.date_joined, 'ГГГГ-ММ') AS yw,
 extract(DAY FROM (ue.entry_at - u.date_joined)) AS days_diff
 ОТ пользователей u 
 СОЕДИНИТЕ userentry ue с u.id = ue.user_id
    ue ГДЕ.дата_вступления >= u.дата_присоединения
)
ВЫБЕРИТЕ
    ua.yw,
 round((100.00 * count(DISTINCT CASE WHEN days_diff >= 0 THEN id ELSE NULL END) / b.cohort_size), 2) AS "day0",
 round((100.00 * count(DISTINCT CASE WHEN days_diff >= 1 THEN id ELSE NULL END) / b.cohort_size), 2) AS "день1",
 round((100.00 * count(DISTINCT CASE WHEN days_diff >= 3 THEN id ELSE NULL END) / b.cohort_size), 2) AS "day3",
 round((100.00 * count(DISTINCT CASE WHEN days_diff >= 7 THEN id ELSE NULL END) / b.cohort_size), 2) AS "day7",
 round((100.00 * count(DISTINCT CASE WHEN days_diff >= 14 THEN id ELSE NULL END) / b.cohort_size), 2) AS "day14",
 округление до целого числа ((100.00 * количество(ОТЛИЧНОЕ ОТ НУЛЯ, ЕСЛИ days_diff >= 30 ТО id ИНАЧЕ NULL КОНЕЦ) / b.размер_когорты), 2) AS "day30",
 округление до целого числа ((100.00 * количество(ОТЛИЧНЫХ СЛУЧАЕВ, КОГДА days_diff >= 60 ТОГДА id ИНАЧЕ NULL КОНЕЦ) / b.размер_когорты), 2) КАК "день60",
 округление до целого числа ((100.00 * количество(ОТЛИЧНЫХ СЛУЧАЕВ, КОГДА days_diff >= 90 ТОГДА id В ПРОТИВНОМ СЛУЧАЕ NULL КОНЕЦ) / b.размер_когорты), 2) КАК "день90"
ИЗ таблицы user_activity ua
ПРИСОЕДИНИТЕ базу b к ua.yw = b.yw 
ГРУППИРОВКА ПО ua.yw, b.cohort_size
Упорядочить по ua.yw в порядке возрастания
```

Выводы:

В результате запроса мы видим достаточно низкую долю пользователей, остающихся в системе в течение длительного времени. Для большинства когорт отток составляет более 90 % к 90-му дню.

# Задание 2

``sql

-- Расчёт показателей относительно баланса пользователя

С помощью user_balance_stats AS (
    ВЫБЕРИТЕ
 идентификатор пользователя,
        сумма (CASE WHEN type_id В (1, 23, 24, 25, 26, 27, 28, 30) THEN value ELSE 0 END) как общий_дебет
        sum(CASE WHEN type_id NOT IN (1, 23, 24, 25, 26, 27, 28, 30) THEN value ELSE 0 END) AS total_credit,
        сумма(значение) в виде текущего баланса
    " транзакция"ИЗ t
    ГРУППИРОВКА ПО user_id
)
ВЫБЕРИТЕ 
    count(DISTINCT user_id) AS общее количество пользователей
 округление(среднее значение(total_debit), 2) AS среднее количество монет, списанных с пользователя,
 round(avg(total_credit), 2) AS avg_coins_credited_per_user,
 round(avg(current_balance), 2) AS avg_user_balance,
 ПЕРЦЕНТИЛЬ(0.5) В ГРУППЕ (ORDER BY текущий_баланс) AS средний_баланс_пользователя
ИЗ статистики баланса пользователей ubs ;
```

Выводы: 

Данные показывают, что пользователи привыкли совершать достаточно дорогие покупки, списания гораздо более существенны, чем начисления, поэтому можно предлагать достаточно высокую цену за подписку.

# Задание 3

```sql

-- Расчет показателей активности пользователей на платформе

С
-- Общее количество пользователей
общее количество пользователей AS (
    count ВЫБРАТЬ(*) В КАЧЕСТВЕ cnt ИЗ пользователей
),
-- Пользователи, решавшие задачи
task_users AS (
    ВЫБРАТЬ ОТДЕЛЬНО user_id ИЗ codesubmit
),
-- Пользователи, прошедшие тесты
test_users AS (
    ВЫБРАТЬ ОТДЕЛЬНО user_id ИЗ teststart
),
-- Активные пользователи (решали задачи или тесты)
active_users AS (
    ВЫБРАТЬ ОТДЕЛЬНО user_id ИЗ task_users
    СОЮЗ
    ВЫБРАТЬ ОТДЕЛЬНО user_id ИЗ test_users
),
-- Статистика по задачам
статистика задач AS (
    ВЫБЕРИТЕ
 идентификатор пользователя,
        count(DISTINCT problem_id) AS количество_попыток_выполнить_задачи
        count(*) AS общее количество попыток выполнения задачи
    ОТ codesubmit
    ГРУППИРОВКА ПО user_id
),
-- Статистика по тестам
test_stats AS (
    ВЫБЕРИТЕ
 идентификатор пользователя,
        count(DISTINCT test_id) AS количество_попыток_пройти_тест,
        count(*) AS общее количество попыток тестирования
    ИЗ тестового запуска
    ГРУППИРОВКА ПО user_id 
),
-- Статистика покупок за кодкоины
статистика покупок AS (
    ВЫБЕРИТЕ
        count(DISTINCT CASE WHEN tt."type" = 23 THEN t.user_id END) AS пользователи, купившие задачи
        count(DISTINCT CASE WHEN tt."type" = 27 THEN t.user_id END) users_bought_tests,
        count(DISTINCT CASE WHEN tt."type" = 24 THEN t.user_id END) users_bought_hints,
        count(DISTINCT CASE WHEN tt."type" = 25 THEN t.user_id END) AS пользователи, купившие решения
        count(CASE WHEN tt."type" = 23 THEN t.id END) AS купленные_задачи,
        count(CASE WHEN tt."type" = 27 THEN t.id END) AS купленные_тесты,
        count(CASE WHEN tt."type" = 24 THEN t.id END) AS купленные_подсказки
        count(CASE WHEN tt."type" = 25 THEN t.id END) AS решения_куплены,
        count(DISTINCT CASE WHEN tt."type" IN (1, 23, 24, 25, 26, 27, 28, 30) THEN t.user_id END) AS users_purchased_anything,
        count(DISTINCT t.user_id) AS пользователи, совершившие хотя бы одну транзакцию
    " транзакция"ИЗ t 
    ПРИСОЕДИНИТЬ тип транзакции tt К t.type_id = tt."type"
),
агрегированная_статистика AS (
    ВЫБЕРИТЕ 
        count(DISTINCT tks.user_id) AS количество_пользователей_задачи,
 объединение(среднее(tks.количество_попыток_выполнения_задач), 0) AS среднее_количество_задач_на_пользователя
 объединение(среднее(tks.общее_количество_попыток_выполнения_задачи), 0) AS среднее_количество_попыток_выполнения_задачи_на_одного_пользователя
 coalesce(avg(tks.total_task_attempts * 1.0 / NULLIF(tks.tasks_attempted, 0)), 0) AS avg_attempts_per_task,
        count(DISTINCT tts.user_id) AS test_users_count,
 объединение(среднее(tts.количество_попыток_тестирования), 0) AS среднее_количество_тестов_на_пользователя
 объединение(среднее(tts.общее_количество_тестовых_попыток), 0) AS среднее_количество_тестовых_попыток_на_пользователя,
 coalesce(avg(tts.total_test_attempts * 1.0 / NULLIF(tts.tests_attempted, 0)), 0) AS avg_attempts_per_test
    ИЗ статистики задач
 ПОЛНОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ test_stats tts ПО tks.идентификатор пользователя = tts.идентификатор пользователя 
)
ВЫБЕРИТЕ
    -- Показатели активности
 (ВЫБРАТЬ посчитать(*) ИЗ active_users au) КАК active_users_count,
 round((SELECT count(*) FROM active_users) * 100.00 / nullif((SELECT cnt FROM total_users), 0), 2) AS active_users_percent,
    -- Средние показатели по задачам
 round(ags.avg_tasks_per_user, 2) AS avg_tasks_per_user,
 round(ags.avg_task_attempts_per_user, 2) AS avg_task_attempts_per_user,
 round(ags.avg_attempts_per_task, 2) AS avg_attempts_per_task,
    ags.количество_пользователей_задачи,
    -- Средние показатели по тестам
 round(ags.avg_tests_per_user, 2) AS avg_tests_per_user,
 round(ags.avg_test_attempts_per_user, 2) AS avg_test_attempts_per_user,
 округление(ags.среднее_количество_попыток_на_тест, 2) AS среднее_количество_попыток_на_тест,
    ags.количество_тестируемых_пользователей,
    -- Статистика покупок
    пс. количество_купленных_задач
    пс. количество_купленных_тестов
    пс. количество_купленных_подсказок
    пс. количество_приобретённых_решений
    пс. задания_выполнены
    пс. купленные тесты
    пс. купленные_подсказки
    пс. приобретённые решения
    ps.купленные_задачи + ps.купленные_тесты + ps.купленные_подсказки + ps.купленные_решения AS общее_количество_приобретенных_товаров
    пс. пользователи_что-то_купили,
    пс. пользователи_с_любой_транзакцией,
 round(ps.users_purchased_anything * 100.00 / NULLIF((SELECT cnt FROM total_users), 0), 2) AS процент_пользователей_купивших_что-либо
ИЗ агрегированной статистики
ПЕРЕКРЕСТНОЕ СОЕДИНЕНИЕ stats_purchase ps
ПЕРЕКРЕСТНОЕ СОЕДИНЕНИЕ total_users tu ;
```

Выводы:

Платформа демонстрирует высокую вовлечённость (62 % активных пользователей) и исключительно успешную монетизацию (41 % пользователей совершали покупки). Основной рост наблюдается за счёт стимулирования неактивных пользователей и повышения вовлечённости в тестах, которые проводятся массово, но поверхностно.
Что касается функционала подписки, имеет смысл разделить её на базовый и премиальный пакеты. В базовом пакете можно предоставить неограниченный доступ к тестам и 1–2 сложным задачам, что удовлетворит потребности большинства пользователей, которые активно покупают тесты, но мало их решают.
Премиум-подписка позволяет получать неограниченное количество подсказок и решений задач. Это позволит монетизировать потребности тех пользователей, которые точечно покупают эти опции, и увеличить средний чек покупки.
